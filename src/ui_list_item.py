# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'frame_pad.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtWidgets import (QGraphicsDropShadowEffect, QWidget, QLabel,
                             QScrollArea, QVBoxLayout, QHBoxLayout, QFrame,
                             QPushButton)
from PyQt5.QtGui import QPixmap, QIcon, QColor
from PyQt5.QtCore import Qt, QSize, QRect
import pyperclip
class ListItem(QWidget):
    """A custom widget that represents a list item with image preview and text content.
    
    This widget is designed to display an image preview along with associated text content
    and provides functionality to copy the text content to clipboard.
    
    Attributes:
        id (int): Unique identifier for the list item
    """
    
    def __init__(self, item_id, parent=None):
        """Initialize the ListItem widget.
        
        Args:
            item_id (int): Unique identifier for this list item
            parent (QWidget, optional): Parent widget. Defaults to None.
        """
        super(ListItem, self).__init__(parent)
        self.id = item_id
        self.setup_ui()
        self.setup_key_shortcuts()
    
    def setup_ui(self):
        """Set up the user interface components."""
        # Main frame setup
        self.frame_padre = self.create_main_frame()
        main_layout = QHBoxLayout(self.frame_padre)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        # Image info section
        self.frame_info_img = self.create_image_info_section()
        main_layout.addWidget(self.frame_info_img)
        
        # Text area section
        self.frame_area = self.create_text_area_section()
        main_layout.addWidget(self.frame_area)
        
        # Set main layout
        self.verticalLayout = QVBoxLayout(self)
        self.verticalLayout.addWidget(self.frame_padre)
    
    def create_main_frame(self):
        """Create and return the main frame."""
        frame = QFrame(self)
        frame.setFrameShape(QFrame.StyledPanel)
        frame.setFrameShadow(QFrame.Raised)
        return frame
    
    def create_image_info_section(self):
        """Create and return the image info section."""
        frame = QFrame()
        frame.setFrameShape(QFrame.StyledPanel)
        frame.setFrameShadow(QFrame.Raised)
        frame.setContentsMargins(0, 0, 0, 0)
        
        layout = QVBoxLayout(frame)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # Image preview
        self.info_img = QLabel()
        self.info_img.setContentsMargins(0, 0, 0, 0)
        self.info_img.setFixedSize(250, 90)
        self.info_img.setAlignment(Qt.AlignHCenter | Qt.AlignTop)
        layout.addWidget(self.info_img)
        
        # Image name
        self.nomb_img = QLabel()
        self.nomb_img.setContentsMargins(0, 0, 0, 0)
        self.nomb_img.setFixedSize(250, 25)
        self.nomb_img.setAlignment(Qt.AlignHCenter | Qt.AlignTop)
        font = self.nomb_img.font()
        font.setPointSize(10)
        self.nomb_img.setFont(font)
        layout.addWidget(self.nomb_img)
        
        return frame
    
    def create_text_area_section(self):
        """Create and return the text area section."""
        frame = QFrame()
        frame.setFrameShape(QFrame.StyledPanel)
        frame.setFrameShadow(QFrame.Raised)
        
        layout = QHBoxLayout(frame)
        layout.setContentsMargins(2, 2, 2, 2)
        
        # Scrollable text area
        self.area_info = QScrollArea()
        self.area_info.setContentsMargins(0, 0, 0, 0)
        self.area_info.setFixedSize(530, 110)
        self.area_info.setWidgetResizable(True)
        
        self.info_text = QLabel()
        self.info_text.setContentsMargins(0, 0, 0, 0)
        self.info_text.setGeometry(QRect(0, 0, 530, 124))
        self.info_text.setWordWrap(True)
        self.info_text.setAlignment(Qt.AlignTop | Qt.AlignLeft)
        self.area_info.setWidget(self.info_text)
        layout.addWidget(self.area_info)
        
        # Copy button
        self.btn_copy = self.create_copy_button()
        layout.addWidget(self.btn_copy)
        
        return frame
    
    def create_copy_button(self):
        """Create and return the copy button."""
        btn = QPushButton()
        btn.setFixedSize(31, 31)
        btn.setStyleSheet("background-color: rgba(255, 255, 255, 0)")
        
        icon = QIcon()
        icon.addPixmap(QPixmap("resources/copy.svg"), QIcon.Normal, QIcon.Off)
        btn.setIcon(icon)
        btn.setIconSize(QSize(24, 24))
        btn.setEnabled(False)
        
        return btn
    
    def setup_key_shortcuts(self):
        """Set up button actions and shortcuts."""
        self.btn_copy.clicked.connect(self.copy_content)
        self.btn_copy.pressed.connect(self.apply_shadow_effect)
        self.btn_copy.released.connect(self.remove_shadow_effect)
    
    def apply_shadow_effect(self):
        """Apply shadow effect to the copy button when pressed."""
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(5)
        shadow.setOffset(0, 0)
        shadow.setColor(QColor(26, 44, 50, 191))
        self.btn_copy.setGraphicsEffect(shadow)
    
    def remove_shadow_effect(self):
        """Remove shadow effect from the copy button."""
        self.btn_copy.setGraphicsEffect(None)
    
    def copy_content(self):
        """Copy the text content to clipboard."""
        text_to_copy = self.info_text.text()
        pyperclip.copy(text_to_copy)
        self.info_text.setTextInteractionFlags(Qt.TextSelectableByMouse)  # Permite seleccionar y copiar el texto