# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'frame_pad.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtWidgets import (QGraphicsDropShadowEffect, QWidget, QLabel,
                             QScrollArea, QVBoxLayout, QHBoxLayout, QFrame,
                             QPushButton, QSizePolicy)
from PyQt5.QtGui import QPixmap, QIcon, QColor
from PyQt5.QtCore import Qt, QSize, QRect
import pyperclip
# from performance_monitor import monitor_performance

class ListItem(QWidget):
    """A custom widget that represents a list item with image preview and text content.
    
    This widget is designed to display an image preview along with associated text content
    and provides functionality to copy the text content to clipboard.
    
    Attributes:
        id (int): Unique identifier for the list item
        _image_pixmap (QPixmap): Cached image pixmap to avoid reloading
        _text_content (str): Cached text content
    """
    
    def __init__(self, item_id: int, parent: QWidget | None = None) -> None:
        """Initialize the ListItem widget.
        
        Args:
            item_id (int): Unique identifier for this list item
            parent (QWidget, optional): Parent widget. Defaults to None.
        """
        super(ListItem, self).__init__(parent)
        self.id = item_id
        self._image_pixmap = None
        self.text_content = ""
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setAttribute(Qt.WA_OpaquePaintEvent)

        self.setup_ui()
        self.setup_key_shortcuts()
    
    def setup_ui(self) -> None:
        """Set up the user interface components."""
        # Main frame setup
        self.frame_padre = self.create_main_frame()
        main_layout = QHBoxLayout(self.frame_padre)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        # Image info section
        self.frame_info_img = self.create_image_info_section()
        main_layout.addWidget(self.frame_info_img)
        
        # Text area section
        self.frame_area = self.create_text_area_section()
        main_layout.addWidget(self.frame_area)
        
        # Set main layout
        self.verticalLayout = QVBoxLayout(self)
        self.verticalLayout.addWidget(self.frame_padre)
    
    def create_main_frame(self) -> QFrame:
        """Create and return the main frame."""
        frame = QFrame(self)
        frame.setFrameShape(QFrame.NoFrame)
        frame.setStyleSheet("""
            QFrame {
                background-color: #ffffff;
                border-radius: 4px;
            }
            QFrame[selected="true"] {
                background-color: #e3f2fd;
                border: 1px solid #90caf9;
            }
        """)
        frame.setMinimumHeight(131)
        
        # Apply shadow effect
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(4)
        shadow.setOffset(0, 2)
        shadow.setColor(QColor(0, 0, 0, 25))
        frame.setGraphicsEffect(shadow)
        
        return frame
    
   
    def create_image_info_section(self) -> QFrame:
        """Create and return the image info section."""
        frame = QFrame()
        frame.setFrameShape(QFrame.StyledPanel)
        frame.setFrameShadow(QFrame.Raised)
        frame.setContentsMargins(0, 0, 0, 0)
        
        # Set size policy to allow horizontal expansion
        size_policy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        frame.setSizePolicy(size_policy)
        
        layout = QVBoxLayout(frame)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # Image preview
        self.info_img = QLabel()
        self.info_img.setContentsMargins(0, 0, 0, 0)
        self.info_img.setMinimumSize(250, 100)
        self.info_img.setAlignment(Qt.AlignHCenter | Qt.AlignTop)
        self.info_img.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        layout.addWidget(self.info_img)
        
        # Image name
        self.nomb_img = QLabel()
        self.nomb_img.setContentsMargins(0, 0, 0, 0)
        self.nomb_img.setMinimumSize(250, 30)
        self.nomb_img.setAlignment(Qt.AlignHCenter | Qt.AlignTop)
        self.nomb_img.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        font = self.nomb_img.font()
        font.setPointSize(10)
        self.nomb_img.setFont(font)
        layout.addWidget(self.nomb_img)
        
        return frame
         
    def create_text_area_section(self) -> QFrame:
        """Create and return the text area section."""
        frame = QFrame()
        frame.setFrameShape(QFrame.StyledPanel)
        frame.setFrameShadow(QFrame.Raised)
        
        # Set size policy to allow horizontal expansion
        size_policy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        frame.setSizePolicy(size_policy)
        
        layout = QHBoxLayout(frame)
        layout.setContentsMargins(2, 2, 2, 2)
        
        # Scrollable text area
        self.area_info = QScrollArea()
        self.area_info.setContentsMargins(0, 0, 0, 0)
        self.area_info.setMinimumSize(530, 130)
        self.area_info.setWidgetResizable(True)
        self.area_info.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        
        self.info_text = QLabel()
        self.info_text.setContentsMargins(0, 0, 0, 0)
        self.info_text.setMinimumSize(530, 134)
        self.info_text.setWordWrap(True)
        self.info_text.setAlignment(Qt.AlignTop | Qt.AlignLeft)
        self.info_text.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.area_info.setWidget(self.info_text)
        layout.addWidget(self.area_info)
        
        # Copy button
        self.btn_copy = self.create_copy_button()
        layout.addWidget(self.btn_copy)
        
        return frame
    
    def create_copy_button(self) -> QPushButton:
        """Create and return the copy button."""
        btn = QPushButton()
        btn.setFixedSize(31, 31)
        btn.setStyleSheet("""
            QPushButton {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 4px;
                padding: 4px;
            }
            QPushButton:hover {
                background-color: #e9ecef;
            }
            QPushButton:pressed {
                background-color: #dee2e6;
            }
        """)
        
        icon = QIcon()
        icon.addPixmap(QPixmap("resources/copy.svg"), QIcon.Normal, QIcon.Off)
        btn.setIcon(icon)
        btn.setIconSize(QSize(24, 24))
        btn.setEnabled(False)
        
        return btn
    
    def setup_key_shortcuts(self) -> None:
        """Set up button actions and shortcuts."""
        self.btn_copy.clicked.connect(self.copy_content)
        self.btn_copy.pressed.connect(self.apply_shadow_effect)
        self.btn_copy.released.connect(self.remove_shadow_effect)
    
    def apply_shadow_effect(self) -> None:
        """Apply shadow effect to the copy button when pressed."""
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(5)
        shadow.setOffset(0, 0)
        shadow.setColor(QColor(26, 44, 50, 191))
        self.btn_copy.setGraphicsEffect(shadow)
    
    def remove_shadow_effect(self) -> None:
        """Remove shadow effect from the copy button."""
        self.btn_copy.setGraphicsEffect(None)
    
    # @monitor_performance
    def set_image(self, image_path: str) -> None:
        """Set the image for the preview with optimized loading.
        
        Args:
            image_path (str): Path to the image file
        """
        if not self._image_pixmap or self._image_pixmap.cacheKey() == 0:
            self._image_pixmap = QPixmap(image_path)
            if not self._image_pixmap.isNull():
                scaled_pixmap = self._image_pixmap.scaled(
                    self.info_img.size(),
                    Qt.KeepAspectRatio,
                    Qt.SmoothTransformation
                )
                self.info_img.setPixmap(scaled_pixmap)
    
    # @monitor_performance
    def set_text(self, text: str) -> None:
        """Set the text content with optimization.
        
        Args:
            text (str): Text content to display
        """
        if text != self.text_content:
            self.text_content = text
            self.info_text.setText(text)
            self.btn_copy.setEnabled(bool(text))
            self.info_text.setTextInteractionFlags(Qt.TextSelectableByMouse)
    
    # @monitor_performance
    def copy_content(self) -> None:
        """Copy the text content to clipboard."""
        try:
            if self.text_content:
                pyperclip.copy(self.text_content.strip())
                # Ensure text remains selectable after copying
                self.info_text.setTextInteractionFlags(Qt.TextSelectableByMouse)
        except Exception as e:
            print(f"Error copying to clipboard: {e}")